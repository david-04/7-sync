//----------------------------------------------------------------------------------------------------------------------
// Base class for all output streams
//----------------------------------------------------------------------------------------------------------------------

abstract class OutputStream {

    //------------------------------------------------------------------------------------------------------------------
    // Log messages and/or objects without indenting line breaks
    //------------------------------------------------------------------------------------------------------------------

    public log(...data: (string | object)[]) {
        this.doLog(
            data.map(item => "object" === typeof item ? JSON.stringify(item, undefined, 4) : `${item}`).join(" ")
        );
    }

    //------------------------------------------------------------------------------------------------------------------
    // Log messages and/or objects with indentation after each line break
    //------------------------------------------------------------------------------------------------------------------

    public logAligned(padding: string, ...data: (string | object)[]) {
        this.doLog(
            data.map(item => "object" === typeof item ? JSON.stringify(item, undefined, 4) : `${item}`)
                .join(" ")
                .split(/\r?\n/)
                .join(padding)
        );
    }

    //------------------------------------------------------------------------------------------------------------------
    // Write stringified data
    //------------------------------------------------------------------------------------------------------------------

    protected abstract doLog(data: string): void;

    //------------------------------------------------------------------------------------------------------------------
    // Close the stream
    //------------------------------------------------------------------------------------------------------------------

    public abstract close(): void;
}

//----------------------------------------------------------------------------------------------------------------------
// A muted output stream
//----------------------------------------------------------------------------------------------------------------------

class NullOutputStream extends OutputStream {

    //------------------------------------------------------------------------------------------------------------------
    // Write stringified data
    //------------------------------------------------------------------------------------------------------------------

    protected doLog(_data: string) {
        // suppress all output
    }

    //------------------------------------------------------------------------------------------------------------------
    // Close the stream
    //------------------------------------------------------------------------------------------------------------------

    public close() {
        // nothing to close
    }
}

//----------------------------------------------------------------------------------------------------------------------
// A console output stream (stdout)
//----------------------------------------------------------------------------------------------------------------------

class ConsoleOutputStream extends OutputStream {

    //------------------------------------------------------------------------------------------------------------------
    // Write stringified data
    //------------------------------------------------------------------------------------------------------------------

    protected doLog(line: string) {
        console.log(line);
    }

    //------------------------------------------------------------------------------------------------------------------
    // Close the stream
    //------------------------------------------------------------------------------------------------------------------

    public close() {
        // nothing to close
    }
}

//----------------------------------------------------------------------------------------------------------------------
// A file output stream
//----------------------------------------------------------------------------------------------------------------------

class FileOutputStream extends OutputStream {

    private fileDescriptor;

    //------------------------------------------------------------------------------------------------------------------
    // Initialization
    //------------------------------------------------------------------------------------------------------------------

    public constructor(private readonly file: string, append: boolean) {
        super();
        try {
            this.fileDescriptor = node.fs.openSync(file, append ? "a" : "w");
        } catch (exception) {
            throw new FriendlyException(`Failed to open log file ${file}: ${exception}`);
        }
    }

    //------------------------------------------------------------------------------------------------------------------
    // Append a message to the log file
    //------------------------------------------------------------------------------------------------------------------

    protected doLog(line: string) {
        try {
            node.fs.writeSync(this.fileDescriptor, `${line}\n`);
        } catch (exception) {
            throw new FriendlyException(`Failed to write to log file ${this.file}: ${firstLineOnly(exception)}`);
        }
    }

    //------------------------------------------------------------------------------------------------------------------
    // Close the log file
    //------------------------------------------------------------------------------------------------------------------

    public close() {
        node.fs.closeSync(this.fileDescriptor);
    }
}
